docker build . // 

docker run -p 3000:3000 ID // 

docker stop NAME // stop container 

docker run node // create new container from image // block terminal // runnign in foreground
docker ps -a   // Shows all container 
docker run -it node

docker build . // builds image from current folder Dockerfile 
docker ps // shows runing containers

docker run -p 3000:80  fd503fd59e35

    EXPLAIN: 
        -p = publish 
        3000 = local 
        80 = container 
        fd503fd59e35  = IMAGE ID


    Added ! html 
    rebuild image again
    and 
  docker run -p 3000:80 ID 


docker start NAME  // start container  // dont block terminal // running in background

docker run -p 3000:80 -d 27af218fcefb // -d detch mode
docker container attach CONTAINER_NAME/CONTAINER_ID // attach in terminal 

docker logs CONTAINER_NAME/CONTAINER_ID // prints all previous logs
docker logs -f CONTAINER_NAME/CONTAINER_ID // follows 
docker start -a CONTAINER_NAME/CONTAINER_ID // start with attach mode 

docker run IMAGE_ID // can't run interactively // ex: input in python

docker run -it IMAGE_ID // 
  // i = interactive , Keep STDIN open even if not attach
  // t = tty , Allocate a pseudo-TTY , TTY terminal

// then if you run 
docker start CONTAINER_NAME 
    // you can't access terminal because detch mode
docker start -a CONTAINER_NAME 
    // start with interactive terminal but only one input / only output 

docker start -a -i  stoic_hamilton // 

docker rm CONTAINER_NAME // removes stopped container
docker rm CONTAINER_NAME CONTAINER_NAME // remove multiple container , seperate by ,

docker container prune // remove al stopped containers at once
docker rmi IMAGE_ID // removes if image is not used, so container should be removed first
docker rmi IMAGE_ID  IMAGE_ID

docker image prune // removes all unused images
